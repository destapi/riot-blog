<app>
  <h3>{this.props.title}<h3>
  <todo-form count={this.state.items.length + 1} add={add}></todo-form>
  <todo-items items={state.items} toggle={toggle}></todo-items>

  <script>
    import TodoForm from './todo-form.riot';
    import TodoItems from './todo-items.riot';

    let unsubscribe;
    export default {
      components: {
        TodoForm,
        TodoItems,
      },
      onBeforeMount(props, state) {
        // initial state
        this.state = {
          items: props.getState(),
        }

      },
      onMounted(props, state){
        unsubscribe = this.props.subscribe(state => {
          this.update({
            items: state.todos
          })
        });
        this.initialTodos();
        this.startEvents();
      },
      onUnmounted(){
        unsubscribe();
      },
      add(title) {
        this.props.getState().add(title)
      },
      toggle(title) {
        this.props.getState().toggle(title)
      },
      startEvents(){
        const sub = new EventSource('http://localhost:3030/events/jimmy');

        // Default events
        sub.addEventListener('open', () => {
            console.log('Connection opened')
        });

        sub.addEventListener('error', () => {
            console.error("Subscription err'd")
        });

        sub.addEventListener('add', (event) => {
            const data = JSON.parse(event.data);
            this.props.getState().addTodo(data);
        });

        sub.addEventListener('toggle', () => {
            const data = JSON.parse(event.data);
            this.props.getState().toggleTodos(data);
        });
      },
      initialTodos(){
        fetch("http://localhost:3030/todos")
        .then(res => res.json())
        .then(data => {
          this.props.getState().initTodos(data);
        })
      }
    }
  </script>
</app>