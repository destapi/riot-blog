<app>
  <h3>{props.title}</h3>
  <todo-form count={state.items.length + 1} add={add}></todo-form>
  <todo-items items={state.items} toggle={toggle}></todo-items>

  <script>
    import TodoForm from './todo-form.riot';
    import TodoItems from './todo-items.riot';

    const remoteUrl = "http://localhost:3000";
    let unsubscribe;
    export default {
      components: {
        TodoForm,
        TodoItems,
      },
      onBeforeMount(props, state) {
        // initial state
        this.state = {
          items: props.getState().todos,
        }
      },
      onMounted(props, state){
        unsubscribe = this.props.subscribe(state => {
          this.update({
            items: state.todos
          })
        });
        this.initialTodos();
        this.startEvents();
      },
      onUnmounted(){
        unsubscribe();
      },
      add(title) {
        // this.props.getState().add(title)
        fetch(`${remoteUrl}/todos/${title}`, { method: 'POST', })
                // .then(res => res.json())
                .then(data => {
                  console.log('add todo status', data);
                })
      },
      toggle(item) {
        // this.props.getState().toggle(title)
        fetch(`${remoteUrl}/todos/${item.title}`, { method: 'PUT', })
                // .then(res => res.json())
                .then(data => {
                  console.log('toggle todo status', data);
                })
      },
      startEvents(){
        const sub = new EventSource(`${remoteUrl}/events/jimmy`);

        // Default events
        sub.addEventListener('open', () => {
            console.log('Connection opened')
        });

        sub.addEventListener('error', () => {
            console.error("Subscription err'd")
        });

        sub.addEventListener('add', (event) => {
            const data = JSON.parse(event.data);
            this.props.getState().addTodo(data);
        });

        sub.addEventListener('toggle', () => {
            const data = JSON.parse(event.data);
            this.props.getState().toggleTodos(data);
        });
      },
      initialTodos(){
        fetch(`${remoteUrl}/todos`)
        .then(res => res.json())
        .then(data => {
          this.props.getState().initTodos(data);
        })
      },
    }
  </script>
</app>